config { type: "incremental",
    schema: "ods_user",
    tags: ["daily"] }


WITH date_range as ( SELECT DATE_SUB(current_date(), INTERVAL 1 DAY) as start_date),
-- WITH date_range as ( SELECT date('2021-07-01') as start_date),

ud as (
  select user_id
    , min(reg_ts) as reg_ts
    , max(contact_id) as contact_id
    , max(branch) as branch
    , max(case when event_type='REG_COMPLETED' then REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.search_gender'),'"','') else NULL end) as search_gender
    , SAFE_CAST(max(case when event_type='PURCHASE_PROBABILITY_CLASSIFICATION' then REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.purchase_probability_score'),'"','') else NULL end) as FLOAT64) as pps
    , STRING_AGG(case when event_type in ('LOGIN_ATTEMPT', 'REG_COMPLETED','EMAIL_SENT', 'LOGIN', 'EMAIL_OPEN', 'CHANGE_EMAIL') then REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.emaildomain'),'"','') end ORDER BY event_ts ASC LIMIT 1) as email_domain
    , max(case when event_type = 'REG_COMPLETED' then ip_address else NULL end) as ip_address
    , max(safe_cast((case when event_type='REG_COMPLETED' then REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.old_id'),'"','') else NULL end) as int64)) as crossreg_userid
    , max(safe_cast(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.guestAreaAbTestData'),'"','') as int64)) as reg_ab_test_id
    , max(safe_cast(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.ab_test_ids'),'"','') as int64)) as pay_ab_test_id
    , max(safe_cast(JSON_EXTRACT(additional_data,'$.time_to_reg_completion') as int64)) as time_to_reg_completion_ms
    , MIN(CASE WHEN event_type="REG_ATTRIBUTION" THEN TIMESTAMP_TRUNC(event_ts, SECOND) ELSE NULL END) app_install_ts_1h
    -- , MAX(REPLACE(JSON_EXTRACT(additional_data,'$.tracking_code_adjust'),'"','')) tracking_code_adjust
    , MAX(REPLACE(JSON_EXTRACT(additional_data,'$.tracker_name'),'"','')) tracker_name
    -- , STRING_AGG(case when event_type='PURCHASE_PROBABILITY_CLASSIFICATION' then REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.source'),'"','') else null end ORDER BY event_ts DESC LIMIT 1)  as pps_source
    , max(case when event_type='PP1_VISIT' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as pp1_visit_1h
    , max(case when event_type='PP2_VISIT' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as pp2_visit_1h  
    , max(case when event_type='PICTURE_UPLOAD' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as pic_upload_1h    
    , max(case when event_type in ('PROFILE_DELETION', 'ACCOUNT_DELETED') and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when event_type = 'ACCOUNT_DELETION_REQUEST' then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as prof_delete_1h     
    , max(case when event_type='INSTANT_MATCHING' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as instant_matches_1h    
    , max(case when event_type='SEARCH_CRITERIA_UPDATE' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as search_update_1h   
    , max(case when event_type in ('ABOUT_ME_COMPLETION','PROFILE_UPDATE') and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as profile_update_1h   
    , max(case when event_type='PROFILE_VIEW' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as profile_view_1h  
    , max(case when event_type='USERMESSAGE_SENT' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.message_type'),'"','')='PLAIN' and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as freetext_sent_1h   
    , max(case when event_type in ('PAYMENT_FO_SUCCESS','PAYMENT_FO_FAILED') and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 1
               when TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 then 0
               else null 
          end) as fo_attempt_1h  

    , MAX(TRIM(JSON_EXTRACT(additional_data,'$.reference'),'"')) reg_reference
    , SAFE_CAST(MAX(CASE WHEN json_extract(additional_data,"$.model_version") IS NULL THEN json_extract(additional_data,"$.purchase_probability_score") ELSE NULL END) AS FLOAT64) pps_old
    , SAFE_CAST(MAX(CASE WHEN json_extract(additional_data,"$.model_version") IS NOT NULL and TIMESTAMP_DIFF(event_ts,reg_ts,HOUR)<=1 THEN json_extract(additional_data,"$.purchase_probability_score") ELSE NULL END) AS FLOAT64) pps_new
    , max(gender) gender
    , STRING_AGG(scammer_status ORDER BY event_ts DESC LIMIT 1)  as scammer_status_latest
    , safe_cast(STRING_AGG(case when event_type='FRAUD_PAYMENT_CLASSIFICATION' then REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.fraud_probability_score'),'"','') else null end ORDER BY event_ts DESC LIMIT 1) as FLOAT64) latest_fraud_score
    , STRING_AGG(case when event_type in ('PROFILE_DELETION','ACCOUNT_DELETED','PAYMENT_DELETED') then 'DEL'
                      when event_type = 'ACCOUNT_DELETION_REQUEST' THEN "P DEL"
                      when event_type in ('CHANGE_MEMBER_STATUS','CHANGE_NOTIFICATIONS','CHANGE_EMAIL','CS_CONTACT','PASSWORD_CHANGE') 
                      then member_status
                      end ORDER BY event_ts DESC LIMIT 1) as member_status_latest
                      
      /*, STRING_AGG(case when event_type in ('PROFILE_DELETION','ACCOUNT_DELETED','PAYMENT_DELETED') then 'DEL'
                      when REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','')='USER_DEACTIVATION' then 'DEL'
                      when event_type in ('CHANGE_NOTIFICATIONS','ACCOUNT_EXPORTED','CHANGE_EMAIL' ,'ACCOUNT_DELETION_REQUEST' ,'ACCOUNT_EXPORT_REQUESTED'  ,'CANCELLATION_FLOW','CS_CONTACT','PASSWORD_CHANGE') OR  (event_type = "EMAIL_SENT_STATUS" AND REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.emstatus'),'"','') = "ERROR") then member_status
                      -- when event_ts<'2018-04-05 00:00:00' then member_status
                      -- when event_ts>'2019-04-01 00:00:00' then member_status -- fix date TBD
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.old_member_status'),'"','')<>REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.new_member_status'),'"','')then member_status
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') = 'MAKING_FPM' and scammer_status='SCAMMER' then 'FPM'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') = 'MAKING_FPM' and brand in ('CDATE','EROVIE') and gender='FEMALE' then 'FPM'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('MAKING_FPM', 'MAKING_PPM','IOS_FO','PAYMENT_CONFIRMED','PROCESSING_CBR','PROCESSING_FO_ARM','PRODUCT_ACTIVATED_AFTER_REDIRECT','PROLONGING','SUCCESSFUL_RENEWAL_ATTEMPT') then 'PPM'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('CHARGEBACK_DEACTIVATION_SCHEDULER_EXTCO_DISABLED','DISABLING_REDEBIT_TRIES','INTCO_DEACTIVATION_SCHEDULER_EXTCO_DISABLED','IOS_EXPIRATION') then 'PENDING'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('CHARGEBACK_DEACTIVATION_SCHEDULER_EXTCO_ENABLED','INTCO_DEACTIVATION_SCHEDULER_EXTCO_ENABLED') then 'EXTCO'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('IOS_REFUND','PENDING_SERVICE_JOB','ADMIN_TOOL') then 'NPM'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('FAILED_RENEWAL_ATTEMPT','RE_REGISTRATION','SCHEDULING_REDEBIT') then 'REDEBIT'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('PSP_DISPUTE_NOTIFICATION') then 'DISPUTED'
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('PRODUCT_ALREADY_DEACTIVATED','PRODUCT_DEACTIVATED') and member_status='REDEBIT' then 'INTCO' -- Most used, not 100% correct
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('PRODUCT_ALREADY_DEACTIVATED','PRODUCT_DEACTIVATED') then 'PENDING' -- Most used, not 100% correct
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('CHARGE_FO_RO_NOTIFICATION') and member_status='PREMIUM' then 'NPM' -- Most used, not 100% correct
                      when event_ts >= '2018-04-05 00:00:00' and event_ts <= '2019-04-01 00:00:00' and REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"','') in ('CHARGE_FO_RO_NOTIFICATION')  then 'PPM' -- Most used, not 100% correct
                      when event_type = 'CHANGE_MEMBER_STATUS' then member_status
                      -- not all events should be considered for member_status, same logic as in change_events
                     -- else member_status 
                 end ORDER BY event_ts DESC LIMIT 1) as member_status_latest*/
    , MAX(CASE WHEN event_type in ('PROFILE_DELETION','ACCOUNT_DELETED','PAYMENT_DELETED') THEN event_ts ELSE NULL END) deactivation_ts
    , SAFE_CAST(STRING_AGG(CASE WHEN coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.category'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.result'),'"',''))="newsletter" 
                                  AND coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.type'),'"',''))="subscribe" 
                                THEN "1" 
                                WHEN coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.category'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.result'),'"',''))="newsletter" 
                                  AND coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.type'),'"',''))="unsubscribe" 
                                THEN "0" 
                                ELSE NULL 
                           END ORDER BY event_ts DESC LIMIT 1) AS INT64) as newsletter_allowed     
    , SAFE_CAST(STRING_AGG(CASE WHEN coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.category'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.result'),'"',''))="notifications" 
                                  AND coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.type'),'"',''))="subscribe" 
                                THEN "1" 
                                WHEN coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.category'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.result'),'"',''))="notifications" 
                                  AND coalesce(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.member_status_change_reason'),'"',''),REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.type'),'"',''))="unsubscribe" 
                                THEN "0" 
                                ELSE NULL 
                           END ORDER BY event_ts DESC LIMIT 1) AS INT64) as notification_allowed     
    , STRING_AGG(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.emaildomain'),'"','') ORDER BY event_ts DESC LIMIT 1) as email_domain_latest
    , MAX(CASE WHEN event_type="EMAIL_SENT_STATUS" AND REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.emstatuscodes'),'"','') LIKE "-%" THEN 1 ELSE null END) hard_bounce
    , SAFE_CAST(STRING_AGG(SAFE_CAST(JSON_EXTRACT(additional_data,'$.scammer_score') AS STRING) ORDER BY event_ts DESC LIMIT 1) AS FLOAT64) as scammer_score
    , MAX( TIMESTAMP_TRUNC(timestamp(SAFE_CAST(email_confirm_ts  AS STRING)), SECOND) ) mailc_ts
    , MAX(CASE WHEN event_type="REG_COMPLETED" 
               THEN CASE WHEN  ua_type='Mobile Hybrid Browser' THEN 'App'
                         WHEN  ua_class='MOBILE_NATIVE' THEN 'App'
                         WHEN  ua_os='Android' THEN 'Mobile'
                         WHEN  ua_os='iOS' THEN 'Mobile'
                         WHEN  ua_os='OS X' THEN 'Desktop'
                         WHEN  ua_os='Mac OS' THEN 'Desktop'
                         WHEN  ua_type='Mobile Browser' THEN 'Mobile'
                         WHEN  ua_os='Windows' THEN 'Desktop'
                         WHEN  ua_type='Browser' THEN 'Desktop'
                         WHEN  ua_class='CLASSIC' THEN 'Desktop'
                         WHEN  ua_class='MOBILE_WEB' THEN 'Mobile'
                         ELSE  'Desktop'
                    END 
               ELSE NULL 
          END) as reg_agent
    , MAX(CASE WHEN event_type="REG_COMPLETED" 
               THEN CASE WHEN  ua_os='Android' THEN 'Android'
                         WHEN  ua_os='iOS' THEN 'iOS'
                         WHEN  ua_os='Windows' THEN 'Windows'
                         WHEN  ua_os='OS X' THEN 'OS X'
                         WHEN  ua_os='Mac OS' THEN 'OS X'
                         ELSE 'Other'
                    END 
               ELSE NULL 
          END) as reg_os
    , MAX(CASE WHEN event_type="REG_COMPLETED" THEN DATE(birthday) ELSE NULL END) birthday
    , MAX(CASE WHEN event_type="REG_COMPLETED" THEN SAFE_CAST(floor(TIMESTAMP_DIFF(timestamp(SAFE_CAST(reg_ts  AS STRING)), timestamp(SAFE_CAST(birthday  AS STRING)),DAY)  / 365)AS INT64) ELSE NULL END) age
    , MAX(CASE WHEN event_type="REG_COMPLETED" 
               THEN CASE WHEN (TIMESTAMP_DIFF(timestamp(SAFE_CAST(reg_ts  AS STRING)), timestamp(SAFE_CAST(birthday  AS STRING)),DAY)  / 365) < 30 THEN '18-29'
                         WHEN (TIMESTAMP_DIFF(timestamp(SAFE_CAST(reg_ts  AS STRING)), timestamp(SAFE_CAST(birthday  AS STRING)),DAY)  / 365) < 40 THEN '30-39'
                         WHEN (TIMESTAMP_DIFF(timestamp(SAFE_CAST(reg_ts  AS STRING)), timestamp(SAFE_CAST(birthday  AS STRING)),DAY)  / 365) < 50 THEN '40-49'
                         WHEN (TIMESTAMP_DIFF(timestamp(SAFE_CAST(reg_ts  AS STRING)), timestamp(SAFE_CAST(birthday  AS STRING)),DAY)  / 365) < 60 THEN '50-59'
                         ELSE '60+' 
                    END 
               ELSE NULL 
          END) age_cluster
    , max(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.user_reference'),'"','')) as reg_token
    , max(geo_data) as geo_data
    , MAX(CASE WHEN event_type="REG_COMPLETED" THEN trim(JSON_EXTRACT(additional_data,'$.ip_asn'),'"') ELSE NULL END) as ip_asn_reg
    , MAX(CASE WHEN event_type="REG_COMPLETED" THEN trim(JSON_EXTRACT(additional_data,'$.ip_aso'),'"') ELSE NULL END) as ip_aso_reg
    , MAX(CASE WHEN event_type="REG_COMPLETED" THEN ip_country ELSE NULL END) as ip_country_reg
    , MAX(CASE WHEN event_type="REG_COMPLETED" THEN ua ELSE NULL END) as ua_reg
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" THEN trim(JSON_EXTRACT(additional_data,'$.ip_asn'),'"') ELSE NULL END) as ip_asn_fo
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" THEN trim(JSON_EXTRACT(additional_data,'$.ip_aso'),'"') ELSE NULL END) as ip_aso_fo
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" THEN trim(JSON_EXTRACT(additional_data,'$.deviceid'),'"') ELSE NULL END) as deviceid_fo
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" THEN ip_country ELSE NULL END) as ip_country_fo
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" THEN ua ELSE NULL END) as ua_fo
               
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" 
               THEN CASE WHEN  ua_type='Mobile Hybrid Browser' THEN 'App'
                         WHEN  ua_class='MOBILE_NATIVE' THEN 'App'
                         WHEN  ua_os='Android' THEN 'Mobile'
                         WHEN  ua_os='iOS' THEN 'Mobile'
                         WHEN  ua_os='OS X' THEN 'Desktop'
                         WHEN  ua_os='Mac OS' THEN 'Desktop'
                         WHEN  ua_type='Mobile Browser' THEN 'Mobile'
                         WHEN  ua_os='Windows' THEN 'Desktop'
                         WHEN  ua_type='Browser' THEN 'Desktop'
                         WHEN  ua_class='CLASSIC' THEN 'Desktop'
                         WHEN  ua_class='MOBILE_WEB' THEN 'Mobile'
                         ELSE  'Desktop'
                    END 
               ELSE NULL 
          END) as pay_user_agent
    , MAX(CASE WHEN event_type="PAYMENT_FO_SUCCESS" 
               THEN CASE WHEN  ua_os='Android' THEN 'Android'
                         WHEN  ua_os='iOS' THEN 'iOS'
                         WHEN  ua_os='Windows' THEN 'Windows'
                         WHEN  ua_os='OS X' THEN 'OS X'
                         WHEN  ua_os='Mac OS' THEN 'OS X'
                         ELSE 'Other'
                    END 
               ELSE NULL 
          END) as pay_os
    , MAX(case when event_type in ('LOGIN','REG_COMPLETED') then TIMESTAMP_TRUNC(event_ts, SECOND) else NULL end) last_login_ts
    , MIN(CASE WHEN REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.type'),'"','')="crm" 
                 OR (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:NF:%' )
                 or (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:CP:%' )
                 or (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:LC:%' )
                 or (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:LC-%' )
               THEN TIMESTAMP_TRUNC(event_ts, SECOND)
               ELSE NULL 
          END) first_crm_login
    , STRING_AGG(CASE WHEN REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.type'),'"','')="crm" 
                        OR (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:NF:%' )
                        or (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:CP:%' )
                        or (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:LC:%' )
                        or (event_type='LOGIN' and JSON_EXTRACT(additional_data,'$.source') like '%:LC-%' )
                      THEN ifnull(REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.source'),'"',''), case  when event_type='REG_COMPLETED' then 'RegComp' end) 
                      ELSE NULL 
                 END ORDER BY event_ts ASC LIMIT 1) as first_crm_message
    , STRING_AGG(CASE WHEN event_type="REG_COMPLETED" 
                      THEN CASE WHEN  ua_type='Mobile Hybrid Browser' THEN 'App'
                                WHEN  ua_class='MOBILE_NATIVE' THEN 'App'
                                WHEN  ua_os='Android' THEN 'Mobile'
                                WHEN  ua_os='iOS' THEN 'Mobile'
                                WHEN  ua_os='OS X' THEN 'Desktop'
                                WHEN  ua_os='Mac OS' THEN 'Desktop'
                                WHEN  ua_type='Mobile Browser' THEN 'Mobile'
                                WHEN  ua_os='Windows' THEN 'Desktop'
                                WHEN  ua_type='Browser' THEN 'Desktop'
                                WHEN  ua_class='CLASSIC' THEN 'Desktop'
                                WHEN  ua_class='MOBILE_WEB' THEN 'Mobile'
                                ELSE  'Desktop'
                           END 
                      ELSE NULL 
                 END ORDER BY event_ts DESC LIMIT 1) as user_agent_latest
    , STRING_AGG(CASE WHEN REGEXP_REPLACE(JSON_EXTRACT(additional_data,'$.source'),'"','')="reg" 
                                  THEN trim(JSON_EXTRACT(additional_data,'$.deviceid'),'"') 
                                  ELSE NULL 
                             END ORDER BY event_ts DESC LIMIT 1) as deviceid_reg
    , STRING_AGG(trim(JSON_EXTRACT(additional_data,'$.ip_asn'),'"') ORDER BY event_ts DESC LIMIT 1) as ip_asn_latest
    , STRING_AGG(trim(JSON_EXTRACT(additional_data,'$.ip_aso'),'"') ORDER BY event_ts DESC LIMIT 1) as ip_aso_latest
    , STRING_AGG(trim(JSON_EXTRACT(additional_data,'$.deviceid'),'"') ORDER BY event_ts DESC LIMIT 1) as deviceid_latest
    , STRING_AGG(ip_country ORDER BY event_ts DESC LIMIT 1) as ip_country_latest
    , STRING_AGG(ua ORDER BY event_ts DESC LIMIT 1) as ua_latest
    , STRING_AGG(trim(JSON_EXTRACT(additional_data,'$.ip_org'),'"') ORDER BY event_ts DESC LIMIT 1) as ip_org_latest
               
    , STRING_AGG(CASE WHEN event_type="REG_COMPLETED" 
                      THEN CASE WHEN  ua_type='Mobile Hybrid Browser' THEN 'App'
                                WHEN  ua_class='MOBILE_NATIVE' THEN 'App'
                                WHEN  ua_os='Android' THEN 'Mobile'
                                WHEN  ua_os='iOS' THEN 'Mobile'
                                WHEN  ua_os='OS X' THEN 'Desktop'
                                WHEN  ua_os='Mac OS' THEN 'Desktop'
                                WHEN  ua_type='Mobile Browser' THEN 'Mobile'
                                WHEN  ua_os='Windows' THEN 'Desktop'
                                WHEN  ua_type='Browser' THEN 'Desktop'
                                WHEN  ua_class='CLASSIC' THEN 'Desktop'
                                WHEN  ua_class='MOBILE_WEB' THEN 'Mobile'
                                ELSE  'Desktop'
                           END 
                      ELSE NULL 
                 END ORDER BY event_ts ASC LIMIT 1) as user_agent_first
    , STRING_AGG(CASE WHEN event_type="PAYMENT_FO_SUCCESS" 
                      THEN CASE WHEN  ua_os='Android' THEN 'Android'
                                WHEN  ua_os='iOS' THEN 'iOS'
                                WHEN  ua_os='Windows' THEN 'Windows'
                                WHEN  ua_os='OS X' THEN 'OS X'
                                WHEN  ua_os='Mac OS' THEN 'OS X'
                                ELSE 'Other'
                           END 
                      ELSE NULL 
                 END ORDER BY event_ts ASC LIMIT 1) as user_os_first
    , max(case when event_type='PICTURE_UPLOAD' then 1 else null end)  pic_upload
    , case when ARRAY_LENGTH(REGEXP_EXTRACT_ALL(STRING_AGG(trim(JSON_EXTRACT(additional_data ,'$.changed_profile_properties.birthday'), '"') ORDER BY event_ts DESC LIMIT 1), ",")) = 2 
           then DATE(PARSE_DATETIME("%h %e, %Y, %I:%S:%M %p", STRING_AGG(trim(JSON_EXTRACT(additional_data ,'$.changed_profile_properties.birthday'), '"') ORDER BY event_ts DESC LIMIT 1))) 
           else DATE(PARSE_DATETIME("%h %e, %Y %I:%S:%M %p", STRING_AGG(trim(JSON_EXTRACT(additional_data ,'$.changed_profile_properties.birthday'), '"') ORDER BY event_ts DESC LIMIT 1)))
      end as birthday_latest
    , min(case when event_type = 'PAYMENT_FO_SUCCESS' then TIMESTAMP_TRUNC(event_ts, SECOND) end) first_order_ts
    , max(case when event_type = 'PAYMENT_FO_SUCCESS' then TIMESTAMP_TRUNC(event_ts, SECOND) end) latest_order_ts
    , min(case when event_type = 'ACCOUNT_DELETION_REQUEST' then TIMESTAMP_TRUNC(event_ts, SECOND) end) deletion_request_ts
    , max(safe_cast((case when event_type = 'REG_COMPLETED' then trim(JSON_EXTRACT(additional_data, '$.cdn_bot_score'), '"') end) as INT64)) as bot_score
    , max(case when event_type = 'PURCHASE_PROBABILITY_CLASSIFICATION' then SAFE_CAST(JSON_EXTRACT(additional_data,'$.noLS.prob') AS FLOAT64) end) as noLS_prob
    , max(case when event_type = 'PPS_REG_CLASSIFICATION' then SAFE_CAST(JSON_EXTRACT(additional_data, '$.purchase_probability_score') as FLOAT64) end) as reg_purchase_probability_score
    , max(case when event_type = 'PPS_REG_CLASSIFICATION' then SAFE_CAST(JSON_EXTRACT(additional_data, '$.mailC.score') as FLOAT64) end) as reg_mailc_probability_score
    , max(case when event_type = 'REG_COMPLETED' then additional_data end) as reg_additional_data
    , max(tracking_code) as tracking_code
  from  ${ref("userdiary_all")} 
  where DATE(event_ts) >= (select start_date from date_range)
  #and DATE(event_ts) < (select end_date from date_range)
  group by user_id
) ,

user_base as (
  select user_id
  from (
    select id user_id from ${ref("userProfile")}  where date(lastUpdated) >= (select start_date from date_range) and id is not null
    union all
    select user_id from ${self()} where user_id is not null
    union all 
    select user_id from ud where user_id is not null
  )
  group by user_id
)



SELECT ub.user_id user_id
  , MAX(coalesce(u.userContactId,ou.contact_id, ud.contact_id)) contact_id
  , max( COALESCE(ud.reg_token, ou.reg_token, r.regtoken)) reg_token
  , TIMESTAMP_TRUNC(MIN(coalesce(ou.reg_ts, u.registered, ud.reg_ts)), SECOND) reg_ts
  , MIN(CASE WHEN DATE(coalesce(ou.reg_ts,u.registered, ud.reg_ts)) < "2018-01-01" THEN DATE_TRUNC(DATE(coalesce(ou.reg_ts,u.registered, ud.reg_ts)), MONTH) ELSE DATE(coalesce(ou.reg_ts,u.registered, ud.reg_ts)) END) reg_partition
  , TIMESTAMP_TRUNC(MAX(COALESCE(CASE WHEN EXTRACT(YEAR FROM ud. mailc_ts)=1970 THEN NULL ELSE ud. mailc_ts END , CASE WHEN EXTRACT(YEAR FROM ou.mailc_ts)=1970 THEN NULL ELSE ou.mailc_ts END, CASE WHEN EXTRACT(YEAR FROM u.emailConfTime)=1970 THEN NULL ELSE u.emailConfTime END)), SECOND) mailc_ts
  , MAX(coalesce(case when ub.user_id in (64057739, 252329351,252329389,252329181) then 1 else null end, case when ou.test_user=0 then null else ou.test_user end, CASE WHEN REGEXP_CONTAINS(u.emailDomain, r'(fc4cd|btestu|insparx|paluem)')=true THEN 1 END, CASE WHEN REGEXP_CONTAINS(ud.email_domain, r'(fc4cd|btestu|insparx|paluem)')=true THEN 1 END, 0)) test_user
  , MAX(coalesce(u.language, ou.branch, ud.branch)) branch
  , MAX(coalesce(u.gender, ud.gender, ou.gender,"MALE")) gender
  , coalesce(STRING_AGG(SAFE_CAST( u.searchGender AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_gender), max(ud.search_gender)) search_gender
  , coalesce(max(ou.birthday), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated ASC LIMIT 1) AS DATE), max(ud.birthday)) birthday # this will be the reg value
  , coalesce(max(ou.age), SAFE_CAST(floor(DATE_DIFF(MAX(DATE(u.registered)), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated ASC LIMIT 1) AS DATE),DAY)/ 365) AS INT64), max(ud.age)) as age
  , coalesce(max(ou.age_group), CASE WHEN (DATE_DIFF(MAX(DATE(u.registered)), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated ASC LIMIT 1) AS DATE),DAY)/ 365) < 30 THEN '18-29'
                                       WHEN (DATE_DIFF(MAX(DATE(u.registered)), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated ASC LIMIT 1) AS DATE),DAY)/ 365) < 40 THEN '30-39'  
                                       WHEN (DATE_DIFF(MAX(DATE(u.registered)), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated ASC LIMIT 1) AS DATE),DAY)/ 365) < 50 THEN '40-49'
                                       WHEN (DATE_DIFF(MAX(DATE(u.registered)), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated ASC LIMIT 1) AS DATE),DAY)/ 365) < 60 THEN '50-59'        
                                       ELSE '60+' 
                                  END, max(ud.age_cluster)) AS age_group  
  , COALESCE(max(ud.birthday_latest), SAFE_CAST(STRING_AGG(FORMAT("%t", DATE(u.birthday1)) ORDER BY u.lastUpdated DESC LIMIT 1) AS DATE), max(ou.birthday)) birthday_latest
  , MAX(COALESCE(ud. scammer_status_latest, ou. scammer_status_latest, "NOSCAMMER") ) scammer_status_latest  # from userdiary
  , coalesce(STRING_AGG(u.scammerStatus ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.scammer_status_admintool)) scammer_status_admintool #are the NULLs NOSCAMMER? Value is called different than in current reporting
  #, MAX(COALESCE(case when ou.member_status_latest = 'DEL' then ou.member_status_latest end, ud. member_status_latest, ou. member_status_latest, "NPM") ) member_status_latest 
, MAX(CASE WHEN COALESCE(ud.member_status_latest,ou.member_status_latest)="DEL" THEN "DEL"
      WHEN COALESCE(ud.deletion_request_ts, ou.deletion_request_ts) IS NOT NULL AND COALESCE(ud. deactivation_ts, ou.deactivation_ts) IS NULL THEN "P DEL"
      WHEN COALESCE(ud.member_status_latest,ou.member_status_latest)="NPM" AND COALESCE(u.status,ou.member_status_admintool)="MEMBER" THEN "NPM"
      WHEN COALESCE(ud.member_status_latest,ou.member_status_latest) in ("FPM","PPM") AND COALESCE(u.status,ou.member_status_admintool)="PREMIUM" 
        THEN COALESCE(ud.member_status_latest,ou.member_status_latest) 
      WHEN COALESCE(ud.member_status_latest,ou.member_status_latest)="PPM" AND COALESCE(u.status,ou.member_status_admintool)="MEMBER" THEN "NPM"
      WHEN coalesce(u.language, ou.branch, ud.branch) like "%US%" OR coalesce(u.language, ou.branch, ud.branch) like "%CA%" 
        AND COALESCE(u.status,ou.member_status_admintool)="PREMIUM" THEN "FPM"
      WHEN COALESCE(u.status,ou.member_status_admintool)="MEMBER" THEN "NPM"
      WHEN COALESCE(u.status,ou.member_status_admintool)="PREMIUM" AND coalesce(u.gender, ud.gender, ou.gender,"MALE")="FEMALE" 
        AND COALESCE(ou.search_gender,ud.search_gender)="MALE" AND coalesce(u.language, ou.branch, ud.branch) NOT LIKE "%-%" THEN "FPM"
      WHEN COALESCE(u.status,ou.member_status_admintool)="PREMIUM" THEN "PPM"
      WHEN COALESCE(u.status,ou.member_status_admintool) IS NULL THEN COALESCE(ud.member_status_latest,ou.member_status_latest)
      ELSE COALESCE(u.status,ou.member_status_admintool,"NPM")
      END) member_status_latest

  , coalesce(STRING_AGG(u.status ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.member_status_admintool)) member_status_admintool #this needs to be named something different since we use FPM/NPM/PPM etc everywhere
  , MAX(COALESCE(ud. deactivation_ts, ou.deactivation_ts) ) deactivation_ts # needs to be from userdiary
  , coalesce(max(ou.email_domain), STRING_AGG( u.emailDomain ORDER BY u.lastUpdated ASC LIMIT 1), max(ud.email_domain)) email_domain # this will be the reg value
  , MAX(coalesce(ou.email_domain_group, CASE WHEN e. email_domain IS NULL THEN "other" ELSE e. email_domain END)) email_domain_group
  , COALESCE(max(ud. email_domain_latest), STRING_AGG( u.emailDomain ORDER BY u.lastUpdated DESC LIMIT 1), max(ou. email_domain))   email_domain_latest
  , MAX(COALESCE(CASE WHEN eg. email_domain IS NULL THEN "other" ELSE eg. email_domain END, ou. email_domain_group_latest) ) email_domain_group_latest
  , TIMESTAMP_TRUNC(MAX(COALESCE(ud. last_login_ts, u.lastlogin, ou. last_login_ts, ou. reg_ts) ), SECOND) last_login_ts
  , MAX(COALESCE(ud. pic_upload, ou. pic_upload, 0) ) pic_upload
  , max(coalesce(ud.reg_agent, ou.reg_device, u.registrationAgent, 'Desktop')) reg_device # do we want in first place consider userdiary? Also mapping?
  , max(coalesce(ud.reg_os, ou.reg_os, u.registrationOS, 'Other') )reg_os  # do we want in first place consider userdiary? Also mapping?
  , MAX(COALESCE(ud.ua_reg,ou.reg_ua)) reg_ua
  , MAX(COALESCE(ud.pay_user_agent,ou.pay_device)) pay_device
  , MAX(COALESCE(ud.pay_os,ou.pay_os)) pay_os
  , MAX(COALESCE(ud.ua_fo,ou.pay_ua)) pay_ua
  , MAX(COALESCE(ud. user_agent_latest, ou. last_device, ou.reg_device, "Desktop") ) last_device
  , MAX(COALESCE(ud.ua_latest,ou.last_ua)) last_ua
  , COALESCE(max(ud.pps_new), SAFE_CAST(STRING_AGG(SAFE_CAST(u.purchaseProbabilityScore AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1) AS FLOAT64), max(ou.purchase_probability_score), max(ud.pps_old),max(ud.pps)) purchase_probability_score
  , MAX(COALESCE(ud. scammer_score, ou. scammer_score) ) scammer_score
  , max(coalesce(ud.latest_fraud_score, ou.fraud_score_latest)) fraud_score_latest
  , coalesce(max(ou.reg_ip_country_code), max(utr.country_code), STRING_AGG( u.registrationIpCountry ORDER BY u.lastUpdated ASC LIMIT 1)) reg_ip_country_code 
  , MAX(COALESCE(ud.ip_country_reg,ou.reg_ip_country)) reg_ip_country
  , MAX(COALESCE(ud.ip_country_fo,ou.pay_ip_country)) pay_ip_country
  , MAX(COALESCE(ud.ip_country_latest,ou.last_ip_country)) last_ip_country
  , MAX(COALESCE(ud.deviceid_reg,ou.reg_device_id)) reg_device_id
  , MAX(COALESCE(ud.deviceid_fo,ou.pay_device_id)) pay_device_id
  , MAX(COALESCE(ud.deviceid_latest,ou.last_device_id)) last_device_id 
  , MAX(COALESCE(ud.ip_asn_reg,ou.reg_ip_asn)) reg_ip_asn
  , MAX(COALESCE(ud.ip_asn_fo,ou.pay_ip_asn)) pay_ip_asn
  , MAX(COALESCE(ud.ip_asn_latest,ou.last_ip_asn)) last_ip_asn
  , MAX(COALESCE(ud.ip_aso_reg,ou.reg_ip_aso)) reg_ip_aso
  , MAX(COALESCE(ud.ip_aso_fo,ou.pay_ip_aso)) pay_ip_aso
  , MAX(COALESCE(ud.ip_aso_latest,ou.last_ip_aso)) last_ip_aso
  , max(coalesce(utr.ip, u.registrationIP, ou.reg_ip_address_encrypted, ud.ip_address)) reg_ip_address_encrypted
  , MAX( COALESCE(ud.pay_ab_test_id, ou.pay_ab_test_id)	)	pay_ab_test_id
  , MAX(COALESCE(o.pay_first_order_ts, ou.pay_first_order_ts) ) pay_first_order_ts
  , MAX(COALESCE(o.pay_last_order_ts, ou.pay_last_order_ts) )  pay_last_order_ts
  , MIN(COALESCE(o.pay_first_ls_ts, ou.pay_first_ls_ts) ) pay_first_ls_ts
  , TIMESTAMP_TRUNC(MIN(coalesce(u.firstPp1VisitTime, ou.pay_first_pp1_ts)), SECOND) pay_first_pp1_ts
  , COALESCE(max(ud. notification_allowed), CASE WHEN STRING_AGG(SAFE_CAST(u.notificationAllowed AS STRING)ORDER BY u.lastUpdated DESC LIMIT 1)="true" THEN 1 END, max(ou.crm_nf_allowed)) crm_nf_allowed 
  , TIMESTAMP_TRUNC(MAX(coalesce(CASE WHEN u.notificationAllowed=false THEN notificationAllowedChangeTime ELSE NULL END, ou.crm_nf_unsubscribe_ts)), SECOND) crm_nf_unsubscribe_ts
  , COALESCE(max(ud. newsletter_allowed), CASE WHEN STRING_AGG(SAFE_CAST(u.newsletterAllowed AS STRING)ORDER BY u.lastUpdated DESC LIMIT 1)="true" THEN 1 END, CASE WHEN STRING_AGG(SAFE_CAST(u.notificationAllowed AS STRING)ORDER BY u.lastUpdated DESC LIMIT 1)="true" THEN 1 END, max(ou.crm_lc_allowed)) crm_lc_allowed 
  , TIMESTAMP_TRUNC(MAX(coalesce(CASE WHEN u.newsletterAllowed=false THEN newsletterAllowedChangeTime ELSE NULL END, ou.crm_lc_unsubscribe_ts)), SECOND) crm_lc_unsubscribe_ts
  , MAX(COALESCE(ou.crm_login_first,ud.first_crm_login)) crm_login_first ## if already value in ods_user, then no update
  , MAX(COALESCE(ou.crm_message_first,ud.first_crm_message)) crm_message_first  ## if already value in ods_user, then no update  
  , MAX(COALESCE(ud. hard_bounce, ou. crm_hard_bounce, 0) ) crm_hard_bounce
  , COALESCE(max(ud.reg_reference), max(ou.reg_reference), STRING_AGG( u.reference ORDER BY u.lastUpdated ASC LIMIT 1))	 reg_reference
  , max(COALESCE(ud.geo_data, ou.geo_data)) geo_data
  , MAX( COALESCE(ud.crossreg_userid, ou.crossreg_user_id)	)	crossreg_user_id
  , MAX( COALESCE(ud.reg_ab_test_id, ou.reg_ab_test_id)	)	reg_ab_test_id
    , MAX( COALESCE(ud.time_to_reg_completion_ms, safe_cast(u.timeToCompleteRegistration as int64), ou.time_to_reg_ms)) time_to_reg_ms
  , MAX( COALESCE(ud.pp1_visit_1h, ou.pp1_visit_1h)	)	pp1_visit_1h
  , MAX( COALESCE(ud.pp2_visit_1h, ou.pp2_visit_1h)	)	pp2_visit_1h
  , MAX( COALESCE(ud.pic_upload_1h, ou.pic_upload_1h)	)	pic_upload_1h
  , MAX( COALESCE(ud.prof_delete_1h, ou.profile_delete_1h)	)	profile_delete_1h
  , MAX( COALESCE(ud.instant_matches_1h, ou.instant_matches_1h)	)	instant_matches_1h
  , MAX( COALESCE(ud.search_update_1h, ou.search_update_1h)	)	search_update_1h
  , MAX( COALESCE(ud.profile_update_1h, ou.profile_update_1h)	)	profile_update_1h
  , MAX( COALESCE(ud.profile_view_1h, ou.profile_view_1h)	)	profile_view_1h
  , MAX( COALESCE(ud.freetext_sent_1h, ou.freetext_sent_1h)	)	freetext_sent_1h
  , MAX( COALESCE(ud.fo_attempt_1h, ou.fo_try_1h)	)	fo_try_1h
  , MAX( COALESCE(ud.app_install_ts_1h, ou.app_install_1h_ts)	)	app_install_1h_ts 

  #profile
  , coalesce(STRING_AGG(SAFE_CAST( u.eyesColor1 AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.eye_color)) eye_color
  , coalesce(STRING_AGG(SAFE_CAST( u.hairLength1 AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.hair_length)) hair_length
  , coalesce(STRING_AGG(SAFE_CAST( u.hairColor1 AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.hair_color)) hair_color
  , coalesce(STRING_AGG(SAFE_CAST( u.shape1 AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.shape)) shape
  , coalesce(STRING_AGG(SAFE_CAST( u.size1 AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.size)) size
  , coalesce(STRING_AGG(SAFE_CAST( u.bodyart AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.bodyart)) bodyart
  , coalesce(STRING_AGG(SAFE_CAST( u.drinkinghabits AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.drinking_habits)) drinking_habits
  , coalesce(STRING_AGG(SAFE_CAST( u.smokinghabits AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.smoking_habits)) smoking_habits
  , coalesce(STRING_AGG(SAFE_CAST( u.familyStatus1 AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.family_status)) family_status 
  , coalesce(STRING_AGG(SAFE_CAST( u.education AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.education)) education
  , coalesce(STRING_AGG(SAFE_CAST( u.professionalfield AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.profession)) profession
  , coalesce(STRING_AGG(SAFE_CAST( u.wells AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.wells)) wells
  , coalesce(STRING_AGG(SAFE_CAST( u.prouds AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.prouds)) prouds
  , max(coalesce(tr.trait_10033_values, ou.traits_income)) as traits_income  
  , max(coalesce(tr.trait_10035_values, ou.traits_children)) as traits_children  
  , max(coalesce(tr.trait_10034_values, ou.traits_religion)) as traits_religion  
  , max(coalesce(st.trait_10033_values, ou.search_traits_income)) as search_traits_income  
  , max(coalesce(st.trait_10035_values, ou.search_traits_children)) as search_traits_children  
  , max(coalesce(st.trait_10034_values, ou.search_traits_religion)) as search_traits_religion  
  , max(coalesce(st.trait_17_values, ou.search_traits_drinking)) as search_traits_drinking
  , max(coalesce(st.trait_18_values, ou.search_traits_smoking)) as search_traits_smoking
  , max(coalesce(st.trait_15_values, ou.search_traits_education)) as search_traits_education
  , coalesce(STRING_AGG(SAFE_CAST( u.searchSizeMin AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_size_min)) as search_size_min
  , coalesce(STRING_AGG(SAFE_CAST( u.searchSizeMax AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_size_max)) as search_size_max
  , coalesce(STRING_AGG(SAFE_CAST( u.searchAgeMin AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_age_min)) as search_age_min
  , coalesce(STRING_AGG(SAFE_CAST( u.searchAgeMax AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_age_max)) as search_age_max
  , coalesce(STRING_AGG(SAFE_CAST( u.searchFamilyStatuses AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_family_status)) as search_family_status
  , coalesce(STRING_AGG(SAFE_CAST( u.searchShapes AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_shape)) as search_shape
  , coalesce(STRING_AGG(SAFE_CAST( u.searchHairLengths AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_hair_length)) as search_hair_length
  , coalesce(STRING_AGG(SAFE_CAST( u.searchHairColors AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_hair_color)) as search_hair_color
  , coalesce(STRING_AGG(SAFE_CAST( u.searchEyesColors AS STRING) ORDER BY u.lastUpdated DESC LIMIT 1), max(ou.search_eye_color)) as search_eye_color

  , MAX(COALESCE(u.cid, ou.tracking_code, ud.tracking_code,"unknown")) tracking_code # this will need to be changed to guestdiary once implementation done
  , MAX(UPPER(COALESCE(u.cid, ou. upcase_tc , ud.tracking_code , "unknown"))) upcase_tc
  , MAX( COALESCE(ud.tracker_name, ou.tracker_name)	)	tracker_name
  
  , min(coalesce(ud.deletion_request_ts, ou.deletion_request_ts)) deletion_request_ts
  , max(coalesce(ud.bot_score, ou.bot_score)) as bot_score
  , max(coalesce(ud.noLS_prob, ou.noLS_prob)) as noLS_prob
  , MAX(COALESCE(ud.ip_org_latest,ou.last_ip_org)) last_ip_org
  , max(coalesce(ud.reg_purchase_probability_score, ou.reg_purchase_probability_score)) as reg_purchase_probability_score
  , max(coalesce(ud.reg_mailc_probability_score, ou.reg_mailc_probability_score)) as reg_mailc_probability_score
  , max(coalesce(ud.reg_additional_data, ou.reg_additional_data)) as reg_additional_data

  , max(coalesce(mu.master_uid, ou.master_uid)) master_uid
  , max(coalesce(mu.uid_rank, ou.uid_rank)) uid_rank
  , max(coalesce(mu.encrypted_email, ou.encrypted_email)) encrypted_email
  , max(coalesce(mu.encrypted_email_rank, ou.encrypted_email_rank)) encrypted_email_rank

FROM user_base ub
  left join (select * from ${ref("userProfile")} where date(lastUpdated) >= (select start_date from date_range)) u
    on ub.user_id = u.id
 
  left join ud
    ON ub.user_id = ud. user_id    
  
  left JOIN ${ref("missing_reg_tokens")} r
    ON ub.user_id=r.userid  
    
  left join ${self()} ou
    on ub.user_id = ou.user_id
  
  left join ${ref("users_master_uid_rank")} mu
    on ub.user_id = mu.user_id

  -- DAT-15408 user reg ip moved to userTrackingInfo
  left join (select userId, string_agg(country order by updatedTime desc limit 1) as country_code, string_agg(ip order by updatedTime desc limit 1) as ip 
              from ${ref("userTrackingInfo")}
              where date(updatedTime) >= (select start_date from date_range) 
                  and type = "REG_IP" and country is not null
                  and date(updatedTime) > '2023-06-13' -- iso code released on 13.06.23
              group by userId) utr
    on ub.user_id = utr.userId

  left join (select id
              , max(lastUpdated)
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='10033' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_10033_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='10034' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_10034_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='10035' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_10035_values
            from ${ref("userProfile")} u , unnest(JSON_EXTRACT_ARRAY(traits, '$')) t
            where REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','') in ('10035','10033', '10034')
              and date(lastUpdated) >= (select start_date from date_range)
            group by id ) tr
    on ub.user_id = tr.id
    
  left join (select id
              , max(lastUpdated)
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='10033' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_10033_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='10034' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_10034_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='10035' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_10035_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='15' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_15_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='17' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_17_values
              , string_agg(case when REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','')='18' then REGEXP_REPLACE(json_extract(t,"$.values"),'"','') else null end order by lastUpdated desc limit 1) as trait_18_values
            from ${ref("userProfile")} u , unnest(JSON_EXTRACT_ARRAY(searchTraits, '$')) t
            where REGEXP_REPLACE(json_extract(t,"$.traitId"),'"','') in ('10033', '10034','10035','15','17','18')
              and date(lastUpdated) >= (select start_date from date_range)
            group by id  ) st
    on ub.user_id = st.id
  

  LEFT JOIN (SELECT email_domain FROM ${ref("v_emaildomain_group")} GROUP BY 1) e  
    ON REGEXP_REPLACE(u.emailDomain,r'\.(.+)',"") =e. email_domain
  
  LEFT JOIN (SELECT 
            user_id 
            , MIN(order_ts) pay_first_order_ts
            , MAX(order_ts) pay_last_order_ts
            , MIN(cancellation_ts) cancellation_ts
            , MIN(rf_ts) rf_ts
            , MIN(cb_ts) cb_ts
            , MIN(COALESCE(rf_ts, cb_ts)) pay_first_ls_ts
            FROM `cdate-prod.ods_payment.payment_subscription` 
            GROUP BY 1) o
    ON ub.user_id = o. user_id 
      
  LEFT JOIN (SELECT email_domain
            FROM ${ref("v_emaildomain_group")}
            GROUP BY 1
            ) eg  
    ON REGEXP_REPLACE(COALESCE(ud. email_domain_latest, ou. email_domain_latest) ,r'\.(.+)',"") =eg. email_domain


-- where date(u.lastUpdated) >= (select start_date from date_range)
GROUP BY 1

